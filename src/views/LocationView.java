/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;


import java.awt.Component;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import tools.DBConnection;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import models.Location;
import controllers.LocationController;
import icontrollers.ILocationController;

/**
 *
 * @author HARRY-PC
 */
public class LocationView extends javax.swing.JFrame {
    DBConnection koneksi = new DBConnection();
    ILocationController ilc = new LocationController(koneksi.getConnection());
    private DefaultTableModel tablocation;
    
    Map param = new HashMap();
    File All = new File ("EmptyReportRegion.jrxml");
    File byId = new File ("EmptyRegionReportbyId.jrxml");
    File byName = new File ("EmptyRegionReportbyName.jrxml");
    
    /**
     * Creates new form RegionView
     * Membuat kolom pada view tabel region
     * menampilkan data region ke tabel
     */
    public LocationView() {
        initComponents();
        tablocation = new DefaultTableModel();
        Tabel_Location.setModel(tablocation);
        tablocation.addColumn("Location ID");
        tablocation.addColumn("Street ad ");
        tablocation.addColumn("Pose code ");
        tablocation.addColumn("City ");
        tablocation.addColumn("Staprov ");
        tablocation.addColumn("Country Id");
        
        getDataLocation();
    }
    
    /**
     * method untuk menyesuaikan lebar kolom pada tabel sesuai dengan datanya
     */
    public void ColumnAdjuser()
    {
        for (int column = 0; column < Tabel_Location.getColumnCount(); column++)
        {
            TableColumn tableColumn = Tabel_Location.getColumnModel().getColumn(column);
            int preferredWidth = tableColumn.getMinWidth();
            int maxWidth = tableColumn.getMaxWidth();
            for (int row = 0; row < Tabel_Location.getRowCount(); row++)
            {
                TableCellRenderer cellRenderer = Tabel_Location.getCellRenderer(row, column);
                Component c = Tabel_Location.prepareRenderer(cellRenderer, row, column);
                int width = c.getPreferredSize().width + Tabel_Location.getIntercellSpacing().width;
                preferredWidth = Math.max(preferredWidth, width);
                if (preferredWidth >= maxWidth)
                {
                    preferredWidth = maxWidth;
                    break;
                }
            }
            tableColumn.setPreferredWidth( preferredWidth );
        }
    }
    
    /**
     * method untuk memanggil data dari database dan menampilkan ke tabel
     */
    public void getDataLocation(){
        //mengosongkan textfiled id dan name
        resetField();
        
        //menghapus isi table region
        tablocation.getDataVector().removeAllElements();
        tablocation.fireTableDataChanged();
        //memanggil list data tabel region dari database
        for (Location l : ilc.getAll()) {
            Object[] obj = new Object[6];
            obj[0] = l.getLocid();
            obj[1] = l.getStradd();
            obj[2] = l.getPoscode();
            obj[3] = l.getCity();
            obj[4] = l.getStaprov();
            obj[5] = l.getCounid();
            tablocation.addRow(obj);
        }
        ColumnAdjuser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Label_Id = new javax.swing.JLabel();
        Label_Name = new javax.swing.JLabel();
        Id_Text = new javax.swing.JTextField();
        Street_Text = new javax.swing.JTextField();
        Button_Insert = new javax.swing.JButton();
        Button_Update = new javax.swing.JButton();
        Button_Delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabel_Location = new javax.swing.JTable();
        Search_Text = new javax.swing.JTextField();
        Combo_Search = new javax.swing.JComboBox<>();
        Button_Print = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Poscod_Text = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        City_Text = new javax.swing.JTextField();
        Statprov_Text = new javax.swing.JTextField();
        Coid_Text = new javax.swing.JTextField();

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Region's Form");
        setResizable(false);

        Label_Id.setText("Location ID");

        Label_Name.setText("Street Addres");

        Id_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Id_TextActionPerformed(evt);
            }
        });

        Button_Insert.setText("Insert");
        Button_Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_InsertActionPerformed(evt);
            }
        });

        Button_Update.setText("Update");
        Button_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_UpdateActionPerformed(evt);
            }
        });

        Button_Delete.setText("Delete");
        Button_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_DeleteActionPerformed(evt);
            }
        });

        Tabel_Location.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabel_Location.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabel_LocationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabel_Location);

        Search_Text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Search_TextKeyReleased(evt);
            }
        });

        Combo_Search.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id", "Name" }));
        Combo_Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Combo_SearchMouseClicked(evt);
            }
        });
        Combo_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo_SearchActionPerformed(evt);
            }
        });

        Button_Print.setText("Print");
        Button_Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_PrintActionPerformed(evt);
            }
        });

        jLabel2.setText("City");

        jLabel3.setText("State Province");

        jLabel5.setText("Postal Code");

        Poscod_Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Poscod_TextActionPerformed(evt);
            }
        });

        jLabel6.setText("Country ID");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Button_Insert)
                        .addGap(18, 18, 18)
                        .addComponent(Button_Update)
                        .addGap(18, 18, 18)
                        .addComponent(Button_Delete)
                        .addGap(315, 315, 315)
                        .addComponent(Button_Print))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Search_Text, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Combo_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Label_Name)
                            .addComponent(Label_Id)
                            .addComponent(jLabel5))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Id_Text, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(Street_Text, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(Poscod_Text))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(City_Text)
                            .addComponent(Statprov_Text)
                            .addComponent(Coid_Text, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Combo_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search_Text, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Id)
                    .addComponent(Id_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(City_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_Name)
                    .addComponent(Street_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Statprov_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Poscod_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(Coid_Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Button_Insert)
                    .addComponent(Button_Update)
                    .addComponent(Button_Delete)
                    .addComponent(Button_Print))
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**
     * mengosongkan textfield untuk siap diisi kembali dengan data baru yang akan disimpan pada database
     */
    public void resetField(){
        Id_Text.setText("");
        Street_Text.setText("");
        Poscod_Text.setText("");
        City_Text.setText("");
        Statprov_Text.setText("");
        Coid_Text.setText("");
    }
    
    /**
     * fungsi yang dijalankan jika tombol Insert ditekan, maka akan menambahkan data ke tabel region
     * @param evt berupa action performed saat button insert di klik
     */
    private void Button_InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_InsertActionPerformed
        if (Id_Text.getText().equals("")||(Street_Text.getText().equals(""))||(Poscod_Text.getText().equals(""))||(City_Text.getText().equals(""))
                ||(Statprov_Text.getText().equals(""))||(Coid_Text.getText().equals(""))) {
            JOptionPane.showMessageDialog(rootPane, "Mohon Mengisi Data Secara Lengkap!", "Warning", JOptionPane.INFORMATION_MESSAGE);
            resetField();
        }
        else{
        ilc.insert(Id_Text.getText(), Street_Text.getText(),Poscod_Text.getText(),City_Text.getText(),Statprov_Text.getText(),Coid_Text.getText());
        getDataLocation();
        JOptionPane.showMessageDialog(rootPane, "Data Berhasil Disimpan", "Saved", JOptionPane.INFORMATION_MESSAGE);
        }
        Id_Text.setEditable(true);
    }//GEN-LAST:event_Button_InsertActionPerformed

    /**
     * fungsi untuk menghapus baris data berdasarkan id pada baris tersebut
     * diharuskan untuk memilih baris pada tabel yang akan dihapus
     * @param evt berupa action performed saat button delete di klik
     */
    private void Button_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_DeleteActionPerformed
        tablocation = (DefaultTableModel) Tabel_Location.getModel();
        int i = Tabel_Location.getSelectedRow(); 

        if (i==-1){
            JOptionPane.showMessageDialog(rootPane, "Mohon Memilih Baris Data!", "Warning", JOptionPane.INFORMATION_MESSAGE);
        } else {
        
        String del = Tabel_Location.getModel().getValueAt(i, 0).toString();
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Yakin Akan Menghapus Data ", "Delete", dialogButton);
        if(dialogResult == 0){
            ilc.delete(del);
            JOptionPane.showMessageDialog(rootPane, "Data Berhasil Dihapus", "Deleted", JOptionPane.INFORMATION_MESSAGE);
            getDataLocation();
            Id_Text.setEditable(true);
            Button_Insert.setEnabled(true);
        }else{
            getDataLocation();
            Id_Text.setEditable(true);
            Button_Insert.setEnabled(true);
        }  
        } 
    }//GEN-LAST:event_Button_DeleteActionPerformed
    /**
     * fungsi yang dijalankan jika tombol Update ditekan, maka akan mengubah data dan menampilkan kembali ke tabel region
     * data yang bisa diubah adalah nama region, sedangkan id region sebagai primary key
     * untuk menghapus, diharuskan dulu untuk memilih baris mana yang akan diubah
     * @param evt berupa action performed saat button update di klik
     */
    private void Button_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_UpdateActionPerformed
        if (Id_Text.getText().equals("")||(Street_Text.getText().equals(""))) {
            JOptionPane.showMessageDialog(rootPane, "Mohon Mengisi Data Secara Lengkap!", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }else{
        ilc.update(Id_Text.getText(), Street_Text.getText());
        JOptionPane.showMessageDialog(rootPane, "Data Berhasil Diperbaharui", "Updated", JOptionPane.INFORMATION_MESSAGE);
        getDataLocation();
        Id_Text.setEditable(true);
        Button_Insert.setEnabled(true);
        }
    }//GEN-LAST:event_Button_UpdateActionPerformed

    /**
     * event yang terjadi jika tabel di klik
     * saat baris pada tabel diklik maka, isi dari table tersebut akan tampil ke textfield id dan nama
     * aksi selanjutnya yang dapat digunakan adalah menghapus atau mengedit data
     * @param evt adalah event mouse clicked pada tabel (memilih baris pada tabel)
     */
    private void Tabel_LocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabel_LocationMouseClicked
        tablocation = (DefaultTableModel) Tabel_Location.getModel();
        int i = Tabel_Location.getSelectedRow();
        Id_Text.setText(tablocation.getValueAt(i, 0).toString());
        Street_Text.setText(tablocation.getValueAt(i, 1).toString());
        Poscod_Text.setText(tablocation.getValueAt(i, 2).toString());
        City_Text.setText(tablocation.getValueAt(i, 3).toString());
        Statprov_Text.setText(tablocation.getValueAt(i, 4).toString());
        Coid_Text.setText(tablocation.getValueAt(i, 5).toString());
        Id_Text.setEditable(false);
        Button_Insert.setEnabled(false);
    }//GEN-LAST:event_Tabel_LocationMouseClicked

    /**
     * 
     * @param evt 
     */
    private void Id_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Id_TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Id_TextActionPerformed

    /**
     * event yang terjadi setiap ada masukan atau perubahan pada textfield search
     * textfield search menjadi kata kunci untuk mencari data pada database
     * combobox search menjadi parameter untuk menjadi data pada database
     * @param evt key released saat sebuah huruf dimasukkan atau diubah
     */
    private void Search_TextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Search_TextKeyReleased
        String filter=(String)Combo_Search.getSelectedItem();
        String val=Search_Text.getText();
        switch (filter){
            case "Id":
                //System.out.println("id" +filter);
                
                if(val.isEmpty()){
                    getDataLocation();
                }else{
                    getDataLocation();
                    tablocation.getDataVector().removeAllElements();
                    for (Location l : ilc.getById(val)) {
                         Object[] obj = new Object[2];
                         obj[0] = l.getLocid();
                         tablocation.addRow(obj);
                    }
                }
                break;
            case "Name":
                try {
                    //System.out.println("name" +filter);
                if(val.isEmpty()){
                    getDataLocation();
                }else{
                    getDataLocation();
                    tablocation.getDataVector().removeAllElements();
                    for (Location l : ilc.getByName(val)) {
                         Object[] obj = new Object[2];
                         obj[0] = l.getLocid();
                         tablocation.addRow(obj);
                    }
                }
                
                } catch (Exception e) {
                    System.out.println(e.getMessage());
            e.printStackTrace();
                }
                break;
            default:
                break;
            }
            
    /*
        //menampilkan hasil pencarian secara umum tanpa parameter
        String val=Search_Text.getText();
            if(val.isEmpty()){
                getDataRegion();
            }else{
                getDataRegion();
                tabregion.getDataVector().removeAllElements();
                for (Region r : irc.search(val)) {
                     Object[] obj = new Object[2];
                     obj[0] = r.getId();
                     obj[1] = r.getName();
                     tabregion.addRow(obj);
                }
            }
    */
    }//GEN-LAST:event_Search_TextKeyReleased

    /**
     * 
     * @param evt 
     */
    private void Combo_SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Combo_SearchMouseClicked

    }//GEN-LAST:event_Combo_SearchMouseClicked

    /**
     * 
     * @param evt action performed saat button print di klik
     */
    private void Button_PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_PrintActionPerformed
//        
//        try {
//            if (Search_Text.getText().isEmpty()) {
//                JasDes = JRXmlLoader.load(All);
//                param.clear();
//            }else if  ( Combo_Search.getSelectedItem()=="Id"){
//                JasDes = JRXmlLoader.load(byId);
//                param.put("REGION_ID",Integer.parseInt(Search_Text.getText()));
//            }
//            else if (Combo_Search.getSelectedItem()=="Name"){
//                JasDes = JRXmlLoader.load(byName);
//                param.put("REGION_NAME",String.valueOf(Search_Text.getText()));
//                System.out.println(Combo_Search.getSelectedItem());
//                System.out.println(Search_Text.getText());
//            }
//
//            
//            JasRep = JasperCompileManager.compileReport(JasDes);
//            JasPri = JasperFillManager.fillReport(JasRep, param, koneksi.getConnection());
//            JasperViewer.viewReport(JasPri, false);
//        } catch (Exception e) {
//            System.out.println(e.getMessage());
//            e.printStackTrace();
//        }
    }//GEN-LAST:event_Button_PrintActionPerformed

    private void Poscod_TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Poscod_TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Poscod_TextActionPerformed

    private void Combo_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Combo_SearchActionPerformed

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LocationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LocationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LocationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LocationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LocationView().setVisible(true);
            }
        });
    }

    //slash bintang 2x
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Delete;
    private javax.swing.JButton Button_Insert;
    private javax.swing.JButton Button_Print;
    private javax.swing.JButton Button_Update;
    private javax.swing.JTextField City_Text;
    private javax.swing.JTextField Coid_Text;
    private javax.swing.JComboBox<String> Combo_Search;
    private javax.swing.JTextField Id_Text;
    private javax.swing.JLabel Label_Id;
    private javax.swing.JLabel Label_Name;
    private javax.swing.JTextField Poscod_Text;
    private javax.swing.JTextField Search_Text;
    private javax.swing.JTextField Statprov_Text;
    private javax.swing.JTextField Street_Text;
    private javax.swing.JTable Tabel_Location;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

}
